// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/golang/protobuf/proto"
	cluster "github.com/topfreegames/pitaya/v2/cluster"
	component "github.com/topfreegames/pitaya/v2/component"
	config "github.com/topfreegames/pitaya/v2/config"
	interfaces "github.com/topfreegames/pitaya/v2/interfaces"
	metrics "github.com/topfreegames/pitaya/v2/metrics"
	router "github.com/topfreegames/pitaya/v2/router"
	session "github.com/topfreegames/pitaya/v2/session"
	worker "github.com/topfreegames/pitaya/v2/worker"
)

// MockPitaya is a mock of Pitaya interface.
type MockPitaya struct {
	ctrl     *gomock.Controller
	recorder *MockPitayaMockRecorder
}

// MockPitayaMockRecorder is the mock recorder for MockPitaya.
type MockPitayaMockRecorder struct {
	mock *MockPitaya
}

// NewMockPitaya creates a new mock instance.
func NewMockPitaya(ctrl *gomock.Controller) *MockPitaya {
	mock := &MockPitaya{ctrl: ctrl}
	mock.recorder = &MockPitayaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPitaya) EXPECT() *MockPitayaMockRecorder {
	return m.recorder
}

// AddRoute mocks base method.
func (m *MockPitaya) AddRoute(serverType string, routingFunction router.RoutingFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoute", serverType, routingFunction)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoute indicates an expected call of AddRoute.
func (mr *MockPitayaMockRecorder) AddRoute(serverType, routingFunction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoute", reflect.TypeOf((*MockPitaya)(nil).AddRoute), serverType, routingFunction)
}

// Documentation mocks base method.
func (m *MockPitaya) Documentation(getPtrNames bool) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Documentation", getPtrNames)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Documentation indicates an expected call of Documentation.
func (mr *MockPitayaMockRecorder) Documentation(getPtrNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Documentation", reflect.TypeOf((*MockPitaya)(nil).Documentation), getPtrNames)
}

// GetDieChan mocks base method.
func (m *MockPitaya) GetDieChan() chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDieChan")
	ret0, _ := ret[0].(chan bool)
	return ret0
}

// GetDieChan indicates an expected call of GetDieChan.
func (mr *MockPitayaMockRecorder) GetDieChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDieChan", reflect.TypeOf((*MockPitaya)(nil).GetDieChan))
}

// GetMetricsReporters mocks base method.
func (m *MockPitaya) GetMetricsReporters() []metrics.Reporter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsReporters")
	ret0, _ := ret[0].([]metrics.Reporter)
	return ret0
}

// GetMetricsReporters indicates an expected call of GetMetricsReporters.
func (mr *MockPitayaMockRecorder) GetMetricsReporters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsReporters", reflect.TypeOf((*MockPitaya)(nil).GetMetricsReporters))
}

// GetModule mocks base method.
func (m *MockPitaya) GetModule(name string) (interfaces.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModule", name)
	ret0, _ := ret[0].(interfaces.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModule indicates an expected call of GetModule.
func (mr *MockPitayaMockRecorder) GetModule(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModule", reflect.TypeOf((*MockPitaya)(nil).GetModule), name)
}

// GetServer mocks base method.
func (m *MockPitaya) GetServer() *cluster.Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer")
	ret0, _ := ret[0].(*cluster.Server)
	return ret0
}

// GetServer indicates an expected call of GetServer.
func (mr *MockPitayaMockRecorder) GetServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockPitaya)(nil).GetServer))
}

// GetServerByID mocks base method.
func (m *MockPitaya) GetServerByID(id string) (*cluster.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerByID", id)
	ret0, _ := ret[0].(*cluster.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerByID indicates an expected call of GetServerByID.
func (mr *MockPitayaMockRecorder) GetServerByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerByID", reflect.TypeOf((*MockPitaya)(nil).GetServerByID), id)
}

// GetServerID mocks base method.
func (m *MockPitaya) GetServerID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServerID indicates an expected call of GetServerID.
func (mr *MockPitayaMockRecorder) GetServerID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerID", reflect.TypeOf((*MockPitaya)(nil).GetServerID))
}

// GetServers mocks base method.
func (m *MockPitaya) GetServers() []*cluster.Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServers")
	ret0, _ := ret[0].([]*cluster.Server)
	return ret0
}

// GetServers indicates an expected call of GetServers.
func (mr *MockPitayaMockRecorder) GetServers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServers", reflect.TypeOf((*MockPitaya)(nil).GetServers))
}

// GetServersByType mocks base method.
func (m *MockPitaya) GetServersByType(t string) (map[string]*cluster.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServersByType", t)
	ret0, _ := ret[0].(map[string]*cluster.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServersByType indicates an expected call of GetServersByType.
func (mr *MockPitayaMockRecorder) GetServersByType(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServersByType", reflect.TypeOf((*MockPitaya)(nil).GetServersByType), t)
}

// GetSessionFromCtx mocks base method.
func (m *MockPitaya) GetSessionFromCtx(ctx context.Context) session.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionFromCtx", ctx)
	ret0, _ := ret[0].(session.Session)
	return ret0
}

// GetSessionFromCtx indicates an expected call of GetSessionFromCtx.
func (mr *MockPitayaMockRecorder) GetSessionFromCtx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionFromCtx", reflect.TypeOf((*MockPitaya)(nil).GetSessionFromCtx), ctx)
}

// GroupAddMember mocks base method.
func (m *MockPitaya) GroupAddMember(ctx context.Context, groupName, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupAddMember", ctx, groupName, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupAddMember indicates an expected call of GroupAddMember.
func (mr *MockPitayaMockRecorder) GroupAddMember(ctx, groupName, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupAddMember", reflect.TypeOf((*MockPitaya)(nil).GroupAddMember), ctx, groupName, uid)
}

// GroupBroadcast mocks base method.
func (m *MockPitaya) GroupBroadcast(ctx context.Context, frontendType, groupName, route string, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupBroadcast", ctx, frontendType, groupName, route, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupBroadcast indicates an expected call of GroupBroadcast.
func (mr *MockPitayaMockRecorder) GroupBroadcast(ctx, frontendType, groupName, route, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupBroadcast", reflect.TypeOf((*MockPitaya)(nil).GroupBroadcast), ctx, frontendType, groupName, route, v)
}

// GroupContainsMember mocks base method.
func (m *MockPitaya) GroupContainsMember(ctx context.Context, groupName, uid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupContainsMember", ctx, groupName, uid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupContainsMember indicates an expected call of GroupContainsMember.
func (mr *MockPitayaMockRecorder) GroupContainsMember(ctx, groupName, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupContainsMember", reflect.TypeOf((*MockPitaya)(nil).GroupContainsMember), ctx, groupName, uid)
}

// GroupCountMembers mocks base method.
func (m *MockPitaya) GroupCountMembers(ctx context.Context, groupName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupCountMembers", ctx, groupName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupCountMembers indicates an expected call of GroupCountMembers.
func (mr *MockPitayaMockRecorder) GroupCountMembers(ctx, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupCountMembers", reflect.TypeOf((*MockPitaya)(nil).GroupCountMembers), ctx, groupName)
}

// GroupCreate mocks base method.
func (m *MockPitaya) GroupCreate(ctx context.Context, groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupCreate", ctx, groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupCreate indicates an expected call of GroupCreate.
func (mr *MockPitayaMockRecorder) GroupCreate(ctx, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupCreate", reflect.TypeOf((*MockPitaya)(nil).GroupCreate), ctx, groupName)
}

// GroupCreateWithTTL mocks base method.
func (m *MockPitaya) GroupCreateWithTTL(ctx context.Context, groupName string, ttlTime time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupCreateWithTTL", ctx, groupName, ttlTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupCreateWithTTL indicates an expected call of GroupCreateWithTTL.
func (mr *MockPitayaMockRecorder) GroupCreateWithTTL(ctx, groupName, ttlTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupCreateWithTTL", reflect.TypeOf((*MockPitaya)(nil).GroupCreateWithTTL), ctx, groupName, ttlTime)
}

// GroupDelete mocks base method.
func (m *MockPitaya) GroupDelete(ctx context.Context, groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupDelete", ctx, groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupDelete indicates an expected call of GroupDelete.
func (mr *MockPitayaMockRecorder) GroupDelete(ctx, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupDelete", reflect.TypeOf((*MockPitaya)(nil).GroupDelete), ctx, groupName)
}

// GroupMembers mocks base method.
func (m *MockPitaya) GroupMembers(ctx context.Context, groupName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupMembers", ctx, groupName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupMembers indicates an expected call of GroupMembers.
func (mr *MockPitayaMockRecorder) GroupMembers(ctx, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupMembers", reflect.TypeOf((*MockPitaya)(nil).GroupMembers), ctx, groupName)
}

// GroupRemoveAll mocks base method.
func (m *MockPitaya) GroupRemoveAll(ctx context.Context, groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupRemoveAll", ctx, groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupRemoveAll indicates an expected call of GroupRemoveAll.
func (mr *MockPitayaMockRecorder) GroupRemoveAll(ctx, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupRemoveAll", reflect.TypeOf((*MockPitaya)(nil).GroupRemoveAll), ctx, groupName)
}

// GroupRemoveMember mocks base method.
func (m *MockPitaya) GroupRemoveMember(ctx context.Context, groupName, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupRemoveMember", ctx, groupName, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupRemoveMember indicates an expected call of GroupRemoveMember.
func (mr *MockPitayaMockRecorder) GroupRemoveMember(ctx, groupName, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupRemoveMember", reflect.TypeOf((*MockPitaya)(nil).GroupRemoveMember), ctx, groupName, uid)
}

// GroupRenewTTL mocks base method.
func (m *MockPitaya) GroupRenewTTL(ctx context.Context, groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupRenewTTL", ctx, groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupRenewTTL indicates an expected call of GroupRenewTTL.
func (mr *MockPitayaMockRecorder) GroupRenewTTL(ctx, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupRenewTTL", reflect.TypeOf((*MockPitaya)(nil).GroupRenewTTL), ctx, groupName)
}

// IsRunning mocks base method.
func (m *MockPitaya) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockPitayaMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockPitaya)(nil).IsRunning))
}

// RPC mocks base method.
func (m *MockPitaya) RPC(ctx context.Context, routeStr string, reply, arg proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPC", ctx, routeStr, reply, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RPC indicates an expected call of RPC.
func (mr *MockPitayaMockRecorder) RPC(ctx, routeStr, reply, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPC", reflect.TypeOf((*MockPitaya)(nil).RPC), ctx, routeStr, reply, arg)
}

// RPCTo mocks base method.
func (m *MockPitaya) RPCTo(ctx context.Context, serverID, routeStr string, reply, arg proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPCTo", ctx, serverID, routeStr, reply, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RPCTo indicates an expected call of RPCTo.
func (mr *MockPitayaMockRecorder) RPCTo(ctx, serverID, routeStr, reply, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPCTo", reflect.TypeOf((*MockPitaya)(nil).RPCTo), ctx, serverID, routeStr, reply, arg)
}

// Register mocks base method.
func (m *MockPitaya) Register(c component.Component, options ...component.Option) {
	m.ctrl.T.Helper()
	varargs := []interface{}{c}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Register", varargs...)
}

// Register indicates an expected call of Register.
func (mr *MockPitayaMockRecorder) Register(c interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{c}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockPitaya)(nil).Register), varargs...)
}

// RegisterModule mocks base method.
func (m *MockPitaya) RegisterModule(module interfaces.Module, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterModule", module, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterModule indicates an expected call of RegisterModule.
func (mr *MockPitayaMockRecorder) RegisterModule(module, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterModule", reflect.TypeOf((*MockPitaya)(nil).RegisterModule), module, name)
}

// RegisterModuleAfter mocks base method.
func (m *MockPitaya) RegisterModuleAfter(module interfaces.Module, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterModuleAfter", module, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterModuleAfter indicates an expected call of RegisterModuleAfter.
func (mr *MockPitayaMockRecorder) RegisterModuleAfter(module, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterModuleAfter", reflect.TypeOf((*MockPitaya)(nil).RegisterModuleAfter), module, name)
}

// RegisterModuleBefore mocks base method.
func (m *MockPitaya) RegisterModuleBefore(module interfaces.Module, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterModuleBefore", module, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterModuleBefore indicates an expected call of RegisterModuleBefore.
func (mr *MockPitayaMockRecorder) RegisterModuleBefore(module, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterModuleBefore", reflect.TypeOf((*MockPitaya)(nil).RegisterModuleBefore), module, name)
}

// RegisterRPCJob mocks base method.
func (m *MockPitaya) RegisterRPCJob(rpcJob worker.RPCJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRPCJob", rpcJob)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRPCJob indicates an expected call of RegisterRPCJob.
func (mr *MockPitayaMockRecorder) RegisterRPCJob(rpcJob interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRPCJob", reflect.TypeOf((*MockPitaya)(nil).RegisterRPCJob), rpcJob)
}

// RegisterRemote mocks base method.
func (m *MockPitaya) RegisterRemote(c component.Component, options ...component.Option) {
	m.ctrl.T.Helper()
	varargs := []interface{}{c}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RegisterRemote", varargs...)
}

// RegisterRemote indicates an expected call of RegisterRemote.
func (mr *MockPitayaMockRecorder) RegisterRemote(c interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{c}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRemote", reflect.TypeOf((*MockPitaya)(nil).RegisterRemote), varargs...)
}

// RegisterSessionClosedCallback mocks base method.
func (m *MockPitaya) RegisterSessionClosedCallback(listener cluster.RemoteClosedListener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSessionClosedCallback", listener)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterSessionClosedCallback indicates an expected call of RegisterSessionClosedCallback.
func (mr *MockPitayaMockRecorder) RegisterSessionClosedCallback(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSessionClosedCallback", reflect.TypeOf((*MockPitaya)(nil).RegisterSessionClosedCallback), listener)
}

// ReliableRPC mocks base method.
func (m *MockPitaya) ReliableRPC(routeStr string, metadata map[string]interface{}, reply, arg proto.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReliableRPC", routeStr, metadata, reply, arg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReliableRPC indicates an expected call of ReliableRPC.
func (mr *MockPitayaMockRecorder) ReliableRPC(routeStr, metadata, reply, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReliableRPC", reflect.TypeOf((*MockPitaya)(nil).ReliableRPC), routeStr, metadata, reply, arg)
}

// ReliableRPCWithOptions mocks base method.
func (m *MockPitaya) ReliableRPCWithOptions(routeStr string, metadata map[string]interface{}, reply, arg proto.Message, opts *config.EnqueueOpts) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReliableRPCWithOptions", routeStr, metadata, reply, arg, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReliableRPCWithOptions indicates an expected call of ReliableRPCWithOptions.
func (mr *MockPitayaMockRecorder) ReliableRPCWithOptions(routeStr, metadata, reply, arg, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReliableRPCWithOptions", reflect.TypeOf((*MockPitaya)(nil).ReliableRPCWithOptions), routeStr, metadata, reply, arg, opts)
}

// SendKickToUsers mocks base method.
func (m *MockPitaya) SendKickToUsers(uids []string, frontendType string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendKickToUsers", uids, frontendType)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendKickToUsers indicates an expected call of SendKickToUsers.
func (mr *MockPitayaMockRecorder) SendKickToUsers(uids, frontendType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendKickToUsers", reflect.TypeOf((*MockPitaya)(nil).SendKickToUsers), uids, frontendType)
}

// SendPushToUsers mocks base method.
func (m *MockPitaya) SendPushToUsers(route string, v interface{}, uids []string, frontendType string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPushToUsers", route, v, uids, frontendType)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPushToUsers indicates an expected call of SendPushToUsers.
func (mr *MockPitayaMockRecorder) SendPushToUsers(route, v, uids, frontendType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPushToUsers", reflect.TypeOf((*MockPitaya)(nil).SendPushToUsers), route, v, uids, frontendType)
}

// SetDebug mocks base method.
func (m *MockPitaya) SetDebug(debug bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDebug", debug)
}

// SetDebug indicates an expected call of SetDebug.
func (mr *MockPitayaMockRecorder) SetDebug(debug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDebug", reflect.TypeOf((*MockPitaya)(nil).SetDebug), debug)
}

// SetDictionary mocks base method.
func (m *MockPitaya) SetDictionary(dict map[string]uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDictionary", dict)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDictionary indicates an expected call of SetDictionary.
func (mr *MockPitayaMockRecorder) SetDictionary(dict interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDictionary", reflect.TypeOf((*MockPitaya)(nil).SetDictionary), dict)
}

// SetHeartbeatTime mocks base method.
func (m *MockPitaya) SetHeartbeatTime(interval time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeartbeatTime", interval)
}

// SetHeartbeatTime indicates an expected call of SetHeartbeatTime.
func (mr *MockPitayaMockRecorder) SetHeartbeatTime(interval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeartbeatTime", reflect.TypeOf((*MockPitaya)(nil).SetHeartbeatTime), interval)
}

// Shutdown mocks base method.
func (m *MockPitaya) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockPitayaMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockPitaya)(nil).Shutdown))
}

// Start mocks base method.
func (m *MockPitaya) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockPitayaMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPitaya)(nil).Start))
}

// StartWorker mocks base method.
func (m *MockPitaya) StartWorker() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartWorker")
}

// StartWorker indicates an expected call of StartWorker.
func (mr *MockPitayaMockRecorder) StartWorker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorker", reflect.TypeOf((*MockPitaya)(nil).StartWorker))
}
